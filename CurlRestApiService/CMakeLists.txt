project(CurlRestApiService)

find_package(CURL REQUIRED)

message(STATUS "CURL_LIBRARIES: ${CURL_LIBRARIES}")

# workaround to cope vcpkg curl error https://github.com/Microsoft/vcpkg/issues/1909
if (WIN32)
list(LENGTH CURL_LIBRARY CURL_LIBRARY_LENGTH)
if (CURL_LIBRARY_LENGTH EQUAL 1)
    set(CURL_LIBRARY_DEBUG_LIB   ${CURL_LIBRARY})
    get_filename_component(CURL_LIBRARY_DEBUG_LIB_PATH ${CURL_LIBRARY_DEBUG_LIB} DIRECTORY)
    set(CURL_LIBRARY_RELEASE_LIB_ ${CURL_LIBRARY_DEBUG_LIB_PATH}/../../lib/libcurl.lib)
    get_filename_component(CURL_LIBRARY_RELEASE_LIB ${CURL_LIBRARY_RELEASE_LIB_} REALPATH)
    unset(CURL_LIBRARY CACHE)
    unset(CURL_LIBRARY)
    unset(CURL_LIBRARIES  CACHE)
    unset(CURL_LIBRARIES)
    set(CURL_LIBRARY "debug;${CURL_LIBRARY_DEBUG_LIB};optimized;${CURL_LIBRARY_RELEASE_LIB}")
    set(CURL_LIBRARIES ${CURL_LIBRARY})
endif()
endif()
#]]
message(STATUS "CURL_LIBRARIES: ${CURL_LIBRARIES}")
message(STATUS "CURL_LIBRARY_DEBUG_LIB_PATH: ${CURL_LIBRARY_DEBUG_LIB_PATH}")
message(STATUS "CURL_LIBRARY_RELEASE_LIB_: ${CURL_LIBRARY_RELEASE_LIB_}")
message(STATUS "CURL_LIBRARY_DEBUG_LIB: ${CURL_LIBRARY_DEBUG_LIB}")
message(STATUS "CURL_LIBRARY_RELEASE_LIB: ${CURL_LIBRARY_RELEASE_LIB}")


set(COMPONENT shape::CurlRestApiService)
DeclareShapeComponent(${COMPONENT})
AddShapeProvidedInterface(${COMPONENT} shape::IRestApiService)
AddShapeRequiredInterface(${COMPONENT} shape::ITraceService MANDATORY MULTIPLE)
ConfigureShapeComponent(${COMPONENT} COMPONENT_HXX)

file(GLOB_RECURSE _HDRFILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h  ${COMPONENT_HXX})
file(GLOB_RECURSE _SRCFILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

source_group("Header Files" FILES ${_HDRFILES})
source_group("Source Files" FILES ${_SRCFILES})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CURL_INCLUDE_DIRS})

if(SHAPE_STATIC_LIBS)
    add_library(${PROJECT_NAME} STATIC ${_HDRFILES} ${_SRCFILES})
else()
    add_library(${PROJECT_NAME} SHARED ${_HDRFILES} ${_SRCFILES})
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE ${CURL_LIBRARIES})

DeployShapeComponent(${PROJECT_NAME})

if(WIN32)
	install(
		FILES
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/libcurl-d.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/SSLEAY32.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/LIBEAY32.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/zlibd1.dll"
		CONFIGURATIONS Debug
		DESTINATION "\${CMAKE_INSTALL_CONFIG_NAME}/${PROJECT_INSTALL_PREFIX}/bin"
	)

	install(
		FILES
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/libcurl.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/SSLEAY32.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/LIBEAY32.dll"
			"$<TARGET_FILE_DIR:${PROJECT_NAME}>/zlib1.dll"
		CONFIGURATIONS Release
		DESTINATION "\${CMAKE_INSTALL_CONFIG_NAME}/${PROJECT_INSTALL_PREFIX}/bin"
	)
endif()
